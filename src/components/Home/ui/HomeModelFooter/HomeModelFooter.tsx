/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.13 gang.gltf 
*/

import React, { useMemo, useRef } from 'react';
import { useGLTF } from '@react-three/drei';
import { useFrame } from '@react-three/fiber';
import * as THREE from 'three';

export function Model(props: any) {
  const group = useRef();
  const { nodes, materials, animations } = useGLTF('/gang.gltf') as any;

  const animation = useMemo(() => {
    const mixer = new THREE.AnimationMixer(nodes);
    const clips = animations;
    const action = mixer.clipAction(clips[0]);
    const action1 = mixer.clipAction(clips[7]);
    const action2 = mixer.clipAction(clips[4]);
    const action3 = mixer.clipAction(clips[4]);

    action.setLoop(THREE.LoopOnce, 1);
    action.clampWhenFinished = true;
    action.enabled = true;

    action1.setLoop(THREE.LoopOnce, 1);
    action1.clampWhenFinished = true;
    action1.enabled = true;

    action3.setLoop(THREE.LoopOnce, 1);
    action3.clampWhenFinished = true;
    action3.enabled = true;

    action2.setLoop(THREE.LoopOnce, 1);
    action2.clampWhenFinished = true;
    action2.enabled = true;

    action.play();
    action1.play();
    action3.play();

    mixer.addEventListener('finished', () => action2.play());

    return { mixer, action };
  }, [animations, nodes]);
  console.log(animation);
  useFrame((state, delta) => animation.mixer.update(delta));

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="Кости_ветки" position={[3.011, 1.426, 1.04]}>
          <primitive object={nodes.Bone} />
          <skinnedMesh
            name="Ветка002"
            geometry={nodes.Ветка002.geometry}
            material={materials['Дерево.001']}
            skeleton={nodes.Ветка002.skeleton}
          />
        </group>
        <group name="rig001" rotation={[Math.PI, 0, Math.PI]}>
          <primitive object={nodes['DEF-spine003']} />
          <primitive object={nodes['DEF-t_featherL']} />
          <primitive object={nodes['DEF-t_featherR']} />
          <primitive object={nodes['DEF-spine']} />
          <primitive object={nodes['DEF-pelvisL']} />
          <primitive object={nodes['DEF-pelvisR']} />
          <primitive object={nodes['DEF-t_index001L']} />
          <primitive object={nodes['DEF-t_middle001L']} />
          <primitive object={nodes['DEF-t_ring001L']} />
          <primitive object={nodes['DEF-t_thumb001L']} />
          <primitive object={nodes['DEF-t_index001R']} />
          <primitive object={nodes['DEF-t_middle001R']} />
          <primitive object={nodes['DEF-t_ring001R']} />
          <primitive object={nodes['DEF-t_thumb001R']} />
          <primitive object={nodes['DEF-thighL']} />
          <primitive object={nodes['DEF-thighR']} />
          <primitive object={nodes['DEF-w_feather001L']} />
          <primitive object={nodes['DEF-w_feather002L']} />
          <primitive object={nodes['DEF-w_feather003L']} />
          <primitive object={nodes['DEF-w_feather004L']} />
          <primitive object={nodes['DEF-WingL']} />
          <primitive object={nodes['DEF-shoulderL']} />
          <primitive object={nodes['DEF-w_feather001R']} />
          <primitive object={nodes['DEF-w_feather002R']} />
          <primitive object={nodes['DEF-w_feather003R']} />
          <primitive object={nodes['DEF-w_feather004R']} />
          <primitive object={nodes['DEF-WingR']} />
          <primitive object={nodes['DEF-shoulderR']} />
          <primitive object={nodes['DEF-beak001T']} />
          <primitive object={nodes['DEF-beak_001B']} />
          {/* <skinnedMesh
            name="Snegir_Mesh001"
            geometry={nodes.Snegir_Mesh001.geometry}
            material={materials.Snegir}
            skeleton={nodes.Snegir_Mesh001.skeleton}
          /> */}
        </group>
        <mesh
          name="Маленькая_ветка"
          geometry={nodes.Маленькая_ветка.geometry}
          material={materials.Дерево}
          position={[3.163, 4.119, 2.397]}
        />
      </group>
    </group>
  );
}

useGLTF.preload('/gang.gltf');
